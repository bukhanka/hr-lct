import { NextResponse } from "next/server";
import { getTextModel, AI_CONFIG, getCachedResult, setCachedResult } from "@/lib/ai/gemini-client";
import { SchemaType } from "@google/generative-ai";

/**
 * Generate creative mission names based on mission type and context
 * Quick AI assist for naming missions in the constructor
 */
export async function POST(request: Request) {
  try {
    const body = await request.json();
    const {
      missionType,
      description = "",
      theme = "galactic-academy",
      campaignContext = "",
      count = 3
    } = body;

    if (!missionType) {
      return NextResponse.json(
        { error: "Mission type is required" },
        { status: 400 }
      );
    }

    // Check cache
    const cacheKey = `mission-name:${missionType}:${theme}:${description}`;
    const cached = getCachedResult(cacheKey);
    if (cached) {
      return NextResponse.json({ suggestions: cached, source: "cached" });
    }

    const themeContext = {
      "galactic-academy": "–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è, –∑–≤–µ–∑–¥—ã, –≥–∞–ª–∞–∫—Ç–∏–∫–∞",
      "corporate-metropolis": "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–∏—Ä, –±–∏–∑–Ω–µ—Å, –≥–æ—Ä–æ–¥",
      "cyberpunk-hub": "–∫–∏–±–µ—Ä–ø–∞–Ω–∫, —Ö–∞–∫–µ—Ä—ã, –±—É–¥—É—â–µ–µ",
      "esg-mission": "—ç–∫–æ–ª–æ–≥–∏—è, —É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –ø—Ä–∏—Ä–æ–¥–∞",
      "scientific-expedition": "–Ω–∞—É–∫–∞, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –æ—Ç–∫—Ä—ã—Ç–∏—è"
    }[theme] || "–≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è";

    const missionTypeContext = {
      "FILE_UPLOAD": "–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤",
      "QUIZ": "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π",
      "VIDEO_WATCH": "–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –≤–∏–¥–µ–æ",
      "ATTEND_OFFLINE": "–ø–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
      "SURVEY": "–æ–ø—Ä–æ—Å –∏–ª–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
      "CODE_CHALLENGE": "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
      "TEAM_MISSION": "–∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
      "TIMED_CHALLENGE": "–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è"
    }[missionType] || "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è";

    try {
      const model = getTextModel();

      const prompt = `
–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è –≥–µ–π–º–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π HR-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

–¢–µ–º–∞: ${themeContext}
–¢–∏–ø –º–∏—Å—Å–∏–∏: ${missionTypeContext}
${description ? `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: ${description}` : ""}
${campaignContext ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignContext}` : ""}

–ó–∞–¥–∞—á–∞: –ü—Ä–∏–¥—É–º–∞–π ${count} –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö—Å—è –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –º–∏—Å—Å–∏–∏.
–ù–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã:
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º–µ
- –ë—ã—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º–∏ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏
- –û—Ç—Ä–∞–∂–∞—Ç—å —Å—É—Ç—å –∑–∞–¥–∞–Ω–∏—è
- –ë—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (2-5 —Å–ª–æ–≤)
- –í—ã–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∏ –∂–µ–ª–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è:
- –î–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã: "–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç", "–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Ç—É–º–∞–Ω–Ω–æ—Å—Ç–∏", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ñ–ª–æ—Ç–æ–º"
- –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞", "–í—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏"
`;

      const schema = {
        type: SchemaType.OBJECT,
        properties: {
          suggestions: {
            type: SchemaType.ARRAY,
            items: {
              type: SchemaType.OBJECT,
              properties: {
                name: {
                  type: SchemaType.STRING,
                  description: "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏"
                },
                subtitle: {
                  type: SchemaType.STRING,
                  description: "–ö—Ä–∞—Ç–∫–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                },
                emoji: {
                  type: SchemaType.STRING,
                  description: "–ü–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è –º–∏—Å—Å–∏–∏"
                }
              },
              required: ["name"]
            }
          }
        },
        required: ["suggestions"]
      };

      const result = await model.generateContent({
        contents: [{ role: "user", parts: [{ text: prompt }] }],
        generationConfig: {
          ...AI_CONFIG,
          temperature: 0.9, // Higher temperature for more creativity
          responseMimeType: "application/json",
          responseSchema: schema as any,
        }
      });

      const response = result.response.text();
      const parsed = JSON.parse(response);
      const suggestions = parsed.suggestions || [];

      // Cache result
      setCachedResult(cacheKey, suggestions);

      return NextResponse.json({
        suggestions,
        missionType,
        theme,
        source: "ai"
      });

    } catch (aiError) {
      console.error("[suggest-mission-name] AI failed:", aiError);

      // Fallback suggestions
      const fallbackNames = generateFallbackNames(missionType, theme);

      return NextResponse.json({
        suggestions: fallbackNames,
        missionType,
        theme,
        source: "fallback"
      });
    }

  } catch (error) {
    console.error("[api/ai/suggest-mission-name] error", error);
    return NextResponse.json(
      { error: "Failed to generate mission names" },
      { status: 500 }
    );
  }
}

// Fallback mission names by type and theme
function generateFallbackNames(missionType: string, theme: string) {
  const nameTemplates: Record<string, Record<string, string[]>> = {
    "FILE_UPLOAD": {
      "galactic-academy": [
        "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–ª–æ—Ç–∞",
        "–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ä—Ç–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞",
        "–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
      ],
      "corporate-metropolis": [
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏",
        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        "–ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
      ],
      "default": [
        "–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤"
      ]
    },
    "QUIZ": {
      "galactic-academy": [
        "–≠–∫–∑–∞–º–µ–Ω –≤ –ê–∫–∞–¥–µ–º–∏–∏",
        "–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"
      ],
      "corporate-metropolis": [
        "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
        "–¢–µ—Å—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π",
        "–û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤"
      ],
      "default": [
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π",
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω"
      ]
    },
    "VIDEO_WATCH": {
      "galactic-academy": [
        "–ë—Ä–∏—Ñ–∏–Ω–≥ –∫–∞–ø–∏—Ç–∞–Ω–∞",
        "–û–±—É—á–µ–Ω–∏–µ –ø–∏–ª–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—é",
        "–ò–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É"
      ],
      "corporate-metropolis": [
        "–¢—Ä–µ–Ω–∏–Ω–≥ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É",
        "–û–±—É—á–∞—é—â–∏–π –≤–µ–±–∏–Ω–∞—Ä",
        "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
      ],
      "default": [
        "–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ",
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        "–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂"
      ]
    },
    "ATTEND_OFFLINE": {
      "galactic-academy": [
        "–°–æ–±—Ä–∞–Ω–∏–µ –Ω–∞ —Ñ–ª–∞–≥–º–∞–Ω–µ",
        "–í—Å—Ç—Ä–µ—á–∞ —ç–∫–∏–ø–∞–∂–∞",
        "–°–æ–≤–µ—Ç –ê–∫–∞–¥–µ–º–∏–∏"
      ],
      "corporate-metropolis": [
        "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
        "–û–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ",
        "–í—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã"
      ],
      "default": [
        "–û—Ñ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∞",
        "–ü–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "–õ–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞"
      ]
    }
  };

  const typeNames = nameTemplates[missionType] || nameTemplates["default"] || {};
  const names = typeNames[theme] || typeNames["default"] || ["–ù–æ–≤–∞—è –º–∏—Å—Å–∏—è"];

  return names.map((name, i) => ({
    name,
    subtitle: "",
    emoji: getMissionEmoji(missionType)
  }));
}

function getMissionEmoji(missionType: string): string {
  const emojiMap: Record<string, string> = {
    "FILE_UPLOAD": "üì§",
    "QUIZ": "üìù",
    "VIDEO_WATCH": "üé•",
    "ATTEND_OFFLINE": "ü§ù",
    "SURVEY": "üìä",
    "CODE_CHALLENGE": "üíª",
    "TEAM_MISSION": "üë•",
    "TIMED_CHALLENGE": "‚è±Ô∏è"
  };
  return emojiMap[missionType] || "‚≠ê";
}
