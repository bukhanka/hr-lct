import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authConfig } from "@/lib/auth";
import { prisma } from "@/lib/prisma";

interface RouteParams {
  params: Promise<{ id: string }>;
}

/**
 * GET /api/analytics/campaigns/[id]/segments
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    const session = await getServerSession(authConfig);
    if (!(session as any)?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { id: campaignId } = await params;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏ —Å –∏—Ö –º–∏—Å—Å–∏—è–º–∏
    const participants = await prisma.userCampaignVariant.findMany({
      where: { campaignId },
      include: {
        user: {
          include: {
            userMissions: {
              where: {
                mission: {
                  campaignId,
                },
              },
              include: {
                mission: true,
              },
              orderBy: {
                completedAt: "desc",
              },
            },
          },
        },
      },
    });

    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–≤ —á–∞—Å–∞—Ö)
    const ACTIVE_THRESHOLD_HOURS = 24;
    const IN_PROGRESS_THRESHOLD_DAYS = 7;
    const STALLED_THRESHOLD_DAYS = 7;
    const DROPPED_THRESHOLD_DAYS = 30;

    const now = new Date();
    const segments = {
      activeChampions: [] as any[],
      inProgress: [] as any[],
      stalled: [] as any[],
      droppedOff: [] as any[],
    };

    participants.forEach((participant) => {
      const user = participant.user;
      const missions = user.userMissions;

      const completedMissions = missions.filter((m) => m.status === "COMPLETED");
      const totalMissions = missions.length;

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      const lastActivity = missions
        .filter((m) => m.completedAt || m.startedAt)
        .sort((a, b) => {
          const dateA = a.completedAt || a.startedAt;
          const dateB = b.completedAt || b.startedAt;
          if (!dateA || !dateB) return 0;
          return dateB.getTime() - dateA.getTime();
        })[0];

      const lastActivityDate = lastActivity?.completedAt || lastActivity?.startedAt;
      const hoursSinceActivity = lastActivityDate
        ? (now.getTime() - lastActivityDate.getTime()) / (1000 * 60 * 60)
        : Infinity;

      const daysSinceActivity = hoursSinceActivity / 24;

      const userData = {
        userId: user.id,
        email: user.email,
        displayName: user.displayName,
        completedMissions: completedMissions.length,
        totalMissions,
        lastActivity: lastActivityDate,
        daysSinceActivity: Math.round(daysSinceActivity * 10) / 10,
      };

      // –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
      if (completedMissions.length >= 3 && hoursSinceActivity <= ACTIVE_THRESHOLD_HOURS) {
        // Active Champions: >3 –º–∏—Å—Å–∏–∏ + –∞–∫—Ç–∏–≤–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á
        segments.activeChampions.push(userData);
      } else if (
        completedMissions.length >= 1 &&
        completedMissions.length <= 2 &&
        daysSinceActivity <= IN_PROGRESS_THRESHOLD_DAYS
      ) {
        // In Progress: 1-2 –º–∏—Å—Å–∏–∏ + –∞–∫—Ç–∏–≤–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        segments.inProgress.push(userData);
      } else if (
        daysSinceActivity > STALLED_THRESHOLD_DAYS &&
        daysSinceActivity <= DROPPED_THRESHOLD_DAYS
      ) {
        // Stalled: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ >7 –¥–Ω–µ–π, –Ω–æ <30 –¥–Ω–µ–π
        segments.stalled.push(userData);
      } else if (daysSinceActivity > DROPPED_THRESHOLD_DAYS) {
        // Dropped Off: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ >30 –¥–Ω–µ–π
        segments.droppedOff.push(userData);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –≤ In Progress
        segments.inProgress.push(userData);
      }
    });

    const totalParticipants = participants.length;

    return NextResponse.json({
      totalParticipants,
      segments: {
        activeChampions: {
          count: segments.activeChampions.length,
          percentage:
            totalParticipants > 0
              ? Math.round((segments.activeChampions.length / totalParticipants) * 100)
              : 0,
          users: segments.activeChampions,
          description: ">3 –º–∏—Å—Å–∏–∏, –∞–∫—Ç–∏–≤–Ω—ã <24—á",
          color: "#10b981", // green
          icon: "üöÄ",
        },
        inProgress: {
          count: segments.inProgress.length,
          percentage:
            totalParticipants > 0
              ? Math.round((segments.inProgress.length / totalParticipants) * 100)
              : 0,
          users: segments.inProgress,
          description: "1-2 –º–∏—Å—Å–∏–∏, –∞–∫—Ç–∏–≤–Ω—ã <7 –¥–Ω–µ–π",
          color: "#3b82f6", // blue
          icon: "üîÑ",
        },
        stalled: {
          count: segments.stalled.length,
          percentage:
            totalParticipants > 0
              ? Math.round((segments.stalled.length / totalParticipants) * 100)
              : 0,
          users: segments.stalled,
          description: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 7-30 –¥–Ω–µ–π",
          color: "#f59e0b", // amber
          icon: "‚è∏Ô∏è",
        },
        droppedOff: {
          count: segments.droppedOff.length,
          percentage:
            totalParticipants > 0
              ? Math.round((segments.droppedOff.length / totalParticipants) * 100)
              : 0,
          users: segments.droppedOff,
          description: "–ù–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å >30 –¥–Ω–µ–π",
          color: "#ef4444", // red
          icon: "‚ùå",
        },
      },
      insights: generateInsights(segments, totalParticipants),
    });
  } catch (error) {
    console.error("Error fetching user segments:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç insights –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
 */
function generateInsights(segments: any, total: number) {
  const insights = [];

  const stalledPercentage = total > 0 ? (segments.stalled.length / total) * 100 : 0;
  const droppedPercentage = total > 0 ? (segments.droppedOff.length / total) * 100 : 0;
  const activePercentage = total > 0 ? (segments.activeChampions.length / total) * 100 : 0;

  if (stalledPercentage > 20) {
    insights.push({
      type: "warning",
      title: "–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      description: `${stalledPercentage.toFixed(0)}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–æ—è–≤–ª—è–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 7-30 –¥–Ω–µ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.`,
      action: "send_reminder",
    });
  }

  if (droppedPercentage > 15) {
    insights.push({
      type: "critical",
      title: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      description: `${droppedPercentage.toFixed(0)}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å >30 –¥–Ω–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –≥–¥–µ –æ–Ω–∏ –∑–∞—Å—Ç—Ä–µ–≤–∞—é—Ç.`,
      action: "analyze_dropoff",
    });
  }

  if (activePercentage > 40) {
    insights.push({
      type: "success",
      title: "–û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
      description: `${activePercentage.toFixed(0)}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–∞–º–ø–∞–Ω–∏—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`,
      action: null,
    });
  }

  return insights;
}

