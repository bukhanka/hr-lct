import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { MissionStatus } from "@/generated/prisma";

/**
 * POST /api/auth/register
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–¥–µ—Ç–∞ —á–µ—Ä–µ–∑ invite-—Å—Å—ã–ª–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { email, displayName, campaignId, campaignSlug } = body;

    if (!email) {
      return NextResponse.json(
        { error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      return NextResponse.json(
        { error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" },
        { status: 409 }
      );
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞–º–ø–∞–Ω–∏—é –ø–æ ID –∏–ª–∏ slug
    let campaign;
    if (campaignId) {
      campaign = await prisma.campaign.findUnique({
        where: { id: campaignId },
      });
    } else if (campaignSlug) {
      campaign = await prisma.campaign.findUnique({
        where: { slug: campaignSlug },
      });
    }

    if (!campaign) {
      return NextResponse.json(
        { error: "–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
        { status: 404 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = await prisma.user.create({
      data: {
        email,
        displayName: displayName || email.split("@")[0],
        role: "CADET",
        experience: 0,
        mana: 0,
        currentRank: 1,
      },
    });

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–º–ø–∞–Ω–∏—é
    await prisma.userCampaignVariant.create({
      data: {
        userId: newUser.id,
        campaignId: campaign.id,
      },
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const missions = await prisma.mission.findMany({
      where: { campaignId: campaign.id },
      include: {
        dependenciesTo: true,
      },
      orderBy: { positionY: "asc" },
    });

    for (const mission of missions) {
      // –ú–∏—Å—Å–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É
      const status = mission.dependenciesTo.length === 0 
        ? MissionStatus.AVAILABLE 
        : MissionStatus.LOCKED;

      await prisma.userMission.create({
        data: {
          userId: newUser.id,
          missionId: mission.id,
          status,
        },
      });
    }

    // –°–æ–∑–¥–∞–µ–º welcome notification
    await prisma.userNotification.create({
      data: {
        userId: newUser.id,
        type: "MISSION_COMPLETED", // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
        title: "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç!",
        message: `–ö–∞–¥–µ—Ç ${newUser.displayName}, –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é –º–∏—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!`,
        metadata: {
          campaignId: campaign.id,
          isWelcome: true,
        },
      },
    });

    return NextResponse.json(
      {
        success: true,
        user: {
          id: newUser.id,
          email: newUser.email,
          displayName: newUser.displayName,
        },
        campaign: {
          id: campaign.id,
          name: campaign.name,
          slug: campaign.slug,
          theme: campaign.theme,
        },
        missionsInitialized: missions.length,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Registration error:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" },
      { status: 500 }
    );
  }
}

