// import type { NextAuthConfig } from "next-auth";
import Credentials from "next-auth/providers/credentials";
import { prisma } from "./prisma";

export type MockUser = {
  id: string;
  email: string;
  name: string;
  role: "cadet" | "architect" | "officer" | "admin";
  description?: string;
};

// –ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const mockUserGroups = {
  admins: [
    {
      id: "u-architect-1",
      email: "architect@example.com",
      name: "–ï–ª–µ–Ω–∞ –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
      role: "architect" as const,
      description: "–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–∞–º–ø–∞–Ω–∏–π"
    },
    {
      id: "u-officer-1",
      email: "officer@example.com",
      name: "–ò–ª—å–¥–∞—Ä –û—Ñ–∏—Ü–µ—Ä",
      role: "officer" as const,
      description: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏–π"
    },
  ],
  champions: [
    {
      id: "u-champion-1",
      email: "champion1@example.com",
      name: "–ê–ª–µ–∫—Å –ù–æ–≤–∏–∫–æ–≤",
      role: "cadet" as const,
      description: "üèÜ 3 –º–∏—Å—Å–∏–∏, –†–∞–Ω–≥ 2 | –ê–∫—Ç–∏–≤–µ–Ω 1—á –Ω–∞–∑–∞–¥"
    },
    {
      id: "u-champion-5",
      email: "champion5@example.com",
      name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
      role: "cadet" as const,
      description: "üèÜ 5 –º–∏—Å—Å–∏–π, –†–∞–Ω–≥ 3 | –ê–∫—Ç–∏–≤–µ–Ω 12—á –Ω–∞–∑–∞–¥"
    },
    {
      id: "u-academy.ch1",
      email: "academy.ch1@example.com",
      name: "–î–µ–Ω–∏—Å –Ø–∫–æ–≤–ª–µ–≤",
      role: "cadet" as const,
      description: "üéì –ê–∫–∞–¥–µ–º–∏—è | 4 –º–∏—Å—Å–∏–∏ | –ê–∫—Ç–∏–≤–µ–Ω —Å–µ–π—á–∞—Å"
    },
  ],
  progress: [
    {
      id: "u-progress-1",
      email: "progress1@example.com",
      name: "–û–ª—å–≥–∞ –ó–∞–π—Ü–µ–≤–∞",
      role: "cadet" as const,
      description: "üìà 2 –º–∏—Å—Å–∏–∏, –†–∞–Ω–≥ 1 | –ê–∫—Ç–∏–≤–Ω–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥"
    },
    {
      id: "u-progress-5",
      email: "progress5@example.com",
      name: "–ù–∞—Ç–∞–ª—å—è –ü–æ–ø–æ–≤–∞",
      role: "cadet" as const,
      description: "üìà 2 –º–∏—Å—Å–∏–∏ + –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ | –ê–∫—Ç–∏–≤–Ω–∞ –≤—á–µ—Ä–∞"
    },
  ],
  stalled: [
    {
      id: "u-stalled-1",
      email: "stalled1@example.com",
      name: "–ú–∏—Ö–∞–∏–ª –§—ë–¥–æ—Ä–æ–≤",
      role: "cadet" as const,
      description: "‚ö†Ô∏è 2 –º–∏—Å—Å–∏–∏ | –ù–µ–∞–∫—Ç–∏–≤–µ–Ω 8 –¥–Ω–µ–π"
    },
    {
      id: "u-stalled-3",
      email: "stalled3@example.com",
      name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–µ–¥–≤–µ–¥–µ–≤",
      role: "cadet" as const,
      description: "‚ö†Ô∏è 2 –º–∏—Å—Å–∏–∏ | –ù–µ–∞–∫—Ç–∏–≤–µ–Ω 15 –¥–Ω–µ–π"
    },
  ],
  dropped: [
    {
      id: "u-dropped-1",
      email: "dropped1@example.com",
      name: "–ù–∏–∫–æ–ª–∞–π –ö—É–∑–Ω–µ—Ü–æ–≤",
      role: "cadet" as const,
      description: "‚ùå 1 –º–∏—Å—Å–∏—è | –ù–µ–∞–∫—Ç–∏–≤–µ–Ω –º–µ—Å—è—Ü"
    },
    {
      id: "u-dropped-2",
      email: "dropped2@example.com",
      name: "–°–≤–µ—Ç–ª–∞–Ω–∞ –ü–∞–≤–ª–æ–≤–∞",
      role: "cadet" as const,
      description: "‚ùå 0 –º–∏—Å—Å–∏–π | –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ 50 –¥–Ω–µ–π"
    },
  ],
  corporate: [
    {
      id: "u-corp.ch1",
      email: "corp.ch1@example.com",
      name: "–ò–≥–æ—Ä—å –°–æ–∫–æ–ª–æ–≤",
      role: "cadet" as const,
      description: "üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è | 3 –º–∏—Å—Å–∏–∏"
    },
    {
      id: "u-corp.pr2",
      email: "corp.pr2@example.com",
      name: "–Ø—Ä–æ—Å–ª–∞–≤–∞ –¢–µ—Ä–µ–Ω—Ç—å–µ–≤–∞",
      role: "cadet" as const,
      description: "üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç | 1 –º–∏—Å—Å–∏—è + –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    },
  ],
  esg: [
    {
      id: "u-esg.ch1",
      email: "esg.ch1@example.com",
      name: "–ú–∞—Ä–∏–Ω–∞ –ö—Ä—ã–ª–æ–≤–∞",
      role: "cadet" as const,
      description: "üå± ESG –ü—Ä–æ–≥—Ä–∞–º–º–∞ | 3 –º–∏—Å—Å–∏–∏"
    },
    {
      id: "u-esg.pr2",
      email: "esg.pr2@example.com",
      name: "–Ø—Ä–∏–Ω–∞ –ü–∞–Ω–∫—Ä–∞—Ç–æ–≤–∞",
      role: "cadet" as const,
      description: "üå± ESG | 1 –º–∏—Å—Å–∏—è + –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    },
  ],
  newbies: [
    {
      id: "u-cadet-student",
      email: "cadet.student@example.com",
      name: "–ù–æ–≤—ã–π –ö–∞–¥–µ—Ç (–°—Ç—É–¥–µ–Ω—Ç)",
      role: "cadet" as const,
      description: "üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | 0 –º–∏—Å—Å–∏–π"
    },
    {
      id: "u-cadet-professional",
      email: "cadet.pro@example.com",
      name: "–ù–æ–≤—ã–π –ö–∞–¥–µ—Ç (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)",
      role: "cadet" as const,
      description: "üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | 0 –º–∏—Å—Å–∏–π"
    },
  ]
};

// –ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è authorize
export const mockUsers: MockUser[] = [
  ...mockUserGroups.admins,
  ...mockUserGroups.champions,
  ...mockUserGroups.progress,
  ...mockUserGroups.stalled,
  ...mockUserGroups.dropped,
  ...mockUserGroups.corporate,
  ...mockUserGroups.esg,
  ...mockUserGroups.newbies,
];

export const authConfig = {
  providers: [
    Credentials({
      name: "Mock",
      credentials: {
        email: { label: "Email", type: "email" },
        role: { label: "Role", type: "text" },
      },
      async authorize(credentials) {
        if (!credentials?.email) {
          return null;
        }

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º mock users (–¥–ª—è –¥–µ–º–æ: –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä—ã, –æ—Ñ–∏—Ü–µ—Ä—ã)
        const mockUser = mockUsers.find(
          (candidate) =>
            candidate.email === credentials.email &&
            (!credentials.role || candidate.role === credentials.role)
        );

        if (mockUser) {
          return mockUser;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–¥–µ—Ç—ã)
        try {
          const dbUser = await prisma.user.findUnique({
            where: { email: credentials.email as string },
          });

          if (dbUser) {
            return {
              id: dbUser.id,
              email: dbUser.email,
              name: dbUser.displayName || dbUser.email,
              role: dbUser.role.toLowerCase() as MockUser["role"],
            };
          }
        } catch (error) {
          console.error("Error checking DB user:", error);
        }

        return null;
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.role = (user as MockUser).role;
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        (session as any).user.id = token.sub ?? "mock";
        (session as any).user.role = token.role as MockUser["role"];
      }
      return session;
    },
  },
  pages: {
    signIn: "/auth/sign-in",
  },
} as any; // satisfies NextAuthConfig;

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      name?: string | null;
      email?: string | null;
      role?: MockUser["role"];
    };
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    role?: MockUser["role"];
  }
}

