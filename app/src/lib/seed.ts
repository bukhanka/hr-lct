import { prisma } from "./prisma";
import { ItemCategory } from "@/generated/prisma";
import { 
  QuizPayload, 
  VideoPayload, 
  FileUploadPayload, 
  FormPayload,
  OfflineEventPayload
} from "./mission-types";

export async function seedDatabase() {
  try {
    console.log("üå± Starting database seeding...");

    // Create basic competencies
    const competencies = [
      { name: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", iconUrl: null },
      { name: "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", iconUrl: null },
      { name: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", iconUrl: null },
      { name: "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", iconUrl: null },
      { name: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", iconUrl: null },
      { name: "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", iconUrl: null },
      { name: "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", iconUrl: null },
      { name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", iconUrl: null },
    ];

    const createdCompetencies = [];
    for (const competency of competencies) {
      const existing = await prisma.competency.findFirst({
        where: { name: competency.name }
      });
      
      const created = existing || await prisma.competency.create({
        data: competency
      });
      
      createdCompetencies.push(created);
    }

    console.log(`üìö Created ${createdCompetencies.length} competencies`);

    // Create rank system
    const ranks = await createRankSystem();
    console.log(`üéñÔ∏è Created ${ranks.length} ranks`);

    // Create store items
    const storeItems = await createStoreItems();
    console.log(`üè™ Created ${storeItems.length} store items`);

    // Create demo campaigns with missions
    const campaigns = await createDemoCampaigns(createdCompetencies);
    
    // Create cadet users with mission progress
    const users = await createCadetUsers(campaigns, createdCompetencies);
    console.log(`üë• Created ${users.length} cadet users with progress`);
    
    console.log("‚úÖ Database seeded successfully");
    
    return {
      competencies: competencies.length,
      ranks: ranks.length,
      storeItems: storeItems.length,
      campaigns: campaigns.length,
      users: users.length
    };
  } catch (error) {
    console.error("‚ùå Failed to seed database:", error);
    throw error;
  }
}

async function createDemoCampaigns(competencies: any[]) {
  const campaigns = [];

  // 1. –õ–∏–Ω–µ–π–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ "–ü—É—Ç—å –≤ –∫–æ—Å–º–æ—Å" (Galactic Academy theme)
  const spaceJourney = await createSpaceJourneyCampaign(competencies);
  campaigns.push(spaceJourney);

  // 2. –í–æ—Ä–æ–Ω–∫–∞ —Å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º "–ê–∫–∞–¥–µ–º–∏—è –∫–∞–¥–µ—Ç–æ–≤" (Galactic Academy theme)
  const academy = await createAcademyCampaign(competencies);
  campaigns.push(academy);

  // 3. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" (Galactic Academy theme)
  const specialization = await createSpecializationCampaign(competencies);
  campaigns.push(specialization);
  
  // 4. Corporate Onboarding (Corporate Metropolis theme)
  const corporate = await createCorporateCampaign(competencies);
  campaigns.push(corporate);
  
  // 5. ESG Program (ESG Mission theme)
  const esg = await createESGCampaign(competencies);
  campaigns.push(esg);

  return campaigns;
}

// –õ–∏–Ω–µ–π–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞: A ‚Üí B ‚Üí C ‚Üí D ‚Üí E
async function createSpaceJourneyCampaign(competencies: any[]) {
  console.log("üöÄ Creating '–ü—É—Ç—å –≤ –∫–æ—Å–º–æ—Å' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ü—É—Ç—å –≤ –∫–æ—Å–º–æ—Å",
      description: "–õ–∏–Ω–µ–π–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –æ—Ç–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –∫–æ—Å–º–æ–Ω–∞–≤—Ç—ã. –ö–∞–∂–¥—ã–π —à–∞–≥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.",
      theme: "cosmic",
      themeConfig: {
        themeId: "galactic-academy",
        funnelType: "onboarding",
        personas: ["students", "professionals"],
        gamificationLevel: "high",
        motivationOverrides: {
          xp: "–û–ø—ã—Ç",
          mana: "–≠–Ω–µ—Ä–≥–∏—è",
          rank: "–†–∞–Ω–≥"
        },
        palette: {
          primary: "#8B5CF6",
          secondary: "#38BDF8",
          surface: "rgba(23, 16, 48, 0.85)"
        }
      },
      startDate: new Date(),
      endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days
    }
  });

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ —Å payload
  const missionsData = [
    {
      campaignId: campaign.id,
      name: "–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ—Ñ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å",
      description: "–ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ –∫–æ—Å–º–æ—Å–µ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–≤–µ–∑–¥–Ω—ã–º –ø–æ–ª–µ—Ç–∞–º.",
      missionType: "COMPLETE_QUIZ",
      experienceReward: 75,
      manaReward: 30,
      positionX: 400,
      positionY: 100,
      confirmationType: "AUTO",
      minRank: 1,
      payload: {
        type: "COMPLETE_QUIZ",
        passingScore: 75,
        timeLimit: 10,
        allowRetries: true,
        maxRetries: 2,
        questions: [
          {
            id: "q1",
            text: "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è?",
            type: "single",
            required: true,
            answers: [
              { id: "a1", text: "–ó–µ–º–ª—è" },
              { id: "a2", text: "–ú–∞—Ä—Å" },
              { id: "a3", text: "–Æ–ø–∏—Ç–µ—Ä" },
              { id: "a4", text: "–°–∞—Ç—É—Ä–Ω" }
            ],
            correctAnswerIds: ["a3"]
          },
          {
            id: "q2", 
            text: "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞:",
            type: "multiple",
            required: true,
            answers: [
              { id: "b1", text: "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å" },
              { id: "b2", text: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å" },
              { id: "b3", text: "–ë–æ—è–∑–Ω—å –≤—ã—Å–æ—Ç—ã" },
              { id: "b4", text: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ" }
            ],
            correctAnswerIds: ["b1", "b2", "b4"]
          },
          {
            id: "q3",
            text: "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–º?",
            type: "text",
            required: true
          }
        ]
      } as QuizPayload
    },
    {
      campaignId: campaign.id,
      name: "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —ç—Å—Å–µ",
      description: "–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Å—Å–µ –æ —Ç–æ–º, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –≤—ã –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–ª–æ—Ç–∞.",
      missionType: "UPLOAD_FILE",
      experienceReward: 125,
      manaReward: 60,
      positionX: 400,
      positionY: 250,
      confirmationType: "MANUAL_REVIEW",
      minRank: 1,
      payload: {
        type: "UPLOAD_FILE",
        templateFileUrl: "/templates/motivation_essay_template.docx",
        allowedFormats: ["pdf", "docx", "doc"],
        maxFileSize: 5 * 1024 * 1024, // 5MB
        requiredFiles: 1,
        instructions: "–≠—Å—Å–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: 1) –í–∞—à—É –º–æ—Ç–∏–≤–∞—Ü–∏—é, 2) –û–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏, 3) –í–∏–¥–µ–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –≤ –∫–æ—Å–º–æ—Å–µ. –ú–∏–Ω–∏–º—É–º 500 —Å–ª–æ–≤."
      } as FileUploadPayload
    },
    {
      campaignId: campaign.id,
      name: "–ë—Ä–∏—Ñ–∏–Ω–≥ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞",
      description: "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ —Ñ–ª–æ—Ç–∞. –£–∑–Ω–∞–π—Ç–µ –æ —Ü–µ–ª—è—Ö –Ω–∞—à–µ–π –º–∏—Å—Å–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–º–∞–Ω–¥—ã.",
      missionType: "WATCH_VIDEO",
      experienceReward: 50,
      manaReward: 25,
      positionX: 400,
      positionY: 400,
      confirmationType: "AUTO",
      minRank: 1,
      payload: {
        type: "WATCH_VIDEO",
        videoUrl: "https://rutube.ru/video/b7d4b6c1234567890abcdef1234567890/", // –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤–∏–¥–µ–æ –æ –∫–æ—Å–º–æ—Å–µ
        watchThreshold: 0.90,
        allowSkip: false,
        duration: 600 // 10 –º–∏–Ω—É—Ç
      } as VideoPayload
    },
    {
      campaignId: campaign.id,
      name: "–õ–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
      description: "–ü—Ä–æ–π–¥–∏—Ç–µ –ª–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–º. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.",
      missionType: "ATTEND_OFFLINE",
      experienceReward: 150,
      manaReward: 75,
      positionX: 400,
      positionY: 550,
      confirmationType: "QR_SCAN",
      minRank: 2,
      payload: {
        type: "ATTEND_OFFLINE",
        eventName: "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–º —Ñ–ª–æ—Ç–∞",
        location: "–ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä, –∫–∞–±–∏–Ω–µ—Ç 301",
        startTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        endTime: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(),
        checkInWindow: 15 // 15 –º–∏–Ω—É—Ç –¥–æ –∏ –ø–æ—Å–ª–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      } as OfflineEventPayload
    },
    {
      campaignId: campaign.id,
      name: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ –ø—Ä–æ—Ü–µ—Å—Å–µ",
      description: "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–±–æ—Ä–∞. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –±—É–¥—É—â–∏—Ö –∫–∞–¥–µ—Ç–æ–≤!",
      missionType: "SUBMIT_FORM",
      experienceReward: 100,
      manaReward: 50,
      positionX: 400,
      positionY: 700,
      confirmationType: "AUTO",
      minRank: 2,
      payload: {
        type: "SUBMIT_FORM",
        title: "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–±–æ—Ä–∞",
        description: "–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
        fields: [
          {
            id: "overall_rating",
            label: "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–±–æ—Ä–∞",
            type: "radio",
            required: true,
            options: ["–û—Ç–ª–∏—á–Ω–æ", "–•–æ—Ä–æ—à–æ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "–ü–ª–æ—Ö–æ"]
          },
          {
            id: "most_valuable",
            label: "–ö–∞–∫–æ–π —ç—Ç–∞–ø –±—ã–ª –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º?",
            type: "select",
            required: true,
            options: ["–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏—è", "–í–∏–¥–µ–æ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞", "–õ–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", "–í—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ"]
          },
          {
            id: "suggestions",
            label: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
            type: "textarea",
            required: false,
            placeholder: "–ß—Ç–æ –±—ã –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ?"
          },
          {
            id: "recommend",
            label: "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –±—ã –ø—Ä–æ–≥—Ä–∞–º–º—É –¥—Ä—É–∑—å—è–º?",
            type: "radio",
            required: true,
            options: ["–î–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–°–∫–æ—Ä–µ–µ –¥–∞", "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç", "–¢–æ—á–Ω–æ –Ω–µ—Ç"]
          }
        ]
      } as FormPayload
    }
  ];

  // –°–æ–∑–¥–∞–µ–º –º–∏—Å—Å–∏–∏ –ø–æ –æ–¥–Ω–æ–π, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å payload
  for (const missionData of missionsData) {
    await prisma.mission.create({
      data: missionData as any
    });
  }

  // Get created missions to create dependencies
  const createdMissions = await prisma.mission.findMany({
    where: { campaignId: campaign.id },
    orderBy: { positionY: 'asc' }
  });

  // Create linear dependencies: [0] ‚Üí [1] ‚Üí [2] ‚Üí [3] ‚Üí [4]
  const dependencies = [];
  for (let i = 0; i < createdMissions.length - 1; i++) {
    dependencies.push({
      sourceMissionId: createdMissions[i].id,
      targetMissionId: createdMissions[i + 1].id
    });
  }

  await prisma.missionDependency.createMany({
    data: dependencies
  });

  // Add competency mappings
  const competencyMappings = [
    { missionId: createdMissions[1].id, competencyId: competencies[7].id, points: 3 }, // Tech literacy
    { missionId: createdMissions[2].id, competencyId: competencies[4].id, points: 5 }, // Communication
    { missionId: createdMissions[3].id, competencyId: competencies[5].id, points: 4 }, // Creativity
    { missionId: createdMissions[4].id, competencyId: competencies[2].id, points: 5 }, // Leadership
  ];

  await prisma.missionCompetency.createMany({
    data: competencyMappings
  });

  console.log(`‚úÖ Created linear campaign with ${createdMissions.length} missions`);
  return campaign;
}

// –í–æ—Ä–æ–Ω–∫–∞ —Å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º: Start ‚Üí Choice ‚Üí Branch A/B ‚Üí Merge ‚Üí Final
async function createAcademyCampaign(competencies: any[]) {
  console.log("üè´ Creating '–ê–∫–∞–¥–µ–º–∏—è –∫–∞–¥–µ—Ç–æ–≤' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ê–∫–∞–¥–µ–º–∏—è –∫–∞–¥–µ—Ç–æ–≤",
      description: "–í–æ—Ä–æ–Ω–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ—Å–ª–µ –æ–±—â–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–¥–µ—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç –ø—É—Ç—å –ø–∏–ª–æ—Ç–∞ –∏–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞.",
      theme: "academy",
      themeConfig: {
        themeId: "corporate-metropolis",
        funnelType: "engagement",
        personas: ["professionals"],
        gamificationLevel: "balanced",
        motivationOverrides: {
          xp: "KPI",
          mana: "–ë–æ–Ω—É—Å—ã",
          rank: "–°—Ç–∞—Ç—É—Å"
        },
        palette: {
          primary: "#38BDF8",
          secondary: "#0EA5E9",
          surface: "rgba(8, 16, 32, 0.9)"
        }
      },
      startDate: new Date(),
      endDate: new Date(Date.now() + 120 * 24 * 60 * 60 * 1000), // 120 days
    }
  });

  const missions = await prisma.mission.createMany({
    data: [
      // Start
      {
        campaignId: campaign.id,
        name: "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è",
        description: "–ü—Ä–æ–π–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∞–∫–∞–¥–µ–º–∏—é. –û—Ü–µ–Ω–∏–º –≤–∞—à–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.",
        missionType: "COMPLETE_QUIZ",
        experienceReward: 60,
        manaReward: 30,
        positionX: 400,
        positionY: 100,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Choice point
      {
        campaignId: campaign.id,
        name: "–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        description: "–ò–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å: —Å—Ç–∞–Ω–µ—Ç–µ –ª–∏ –≤—ã –ø–∏–ª–æ—Ç–æ–º –∏–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º?",
        missionType: "CUSTOM",
        experienceReward: 40,
        manaReward: 20,
        positionX: 400,
        positionY: 250,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Branch A - Pilot path
      {
        campaignId: campaign.id,
        name: "–õ–µ—Ç–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–ª–æ—Ç–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥–æ–ª–µ—Ç–æ–º, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∫–æ—Å–º–æ—Å–µ, —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–∞–Ω–µ–≤—Ä—ã.",
        missionType: "COMPLETE_QUIZ",
        experienceReward: 80,
        manaReward: 40,
        positionX: 250,
        positionY: 400,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Branch B - Engineer path  
      {
        campaignId: campaign.id,
        name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–∞: —Ä–µ–º–æ–Ω—Ç —Å–∏—Å—Ç–µ–º, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π.",
        missionType: "CUSTOM",
        experienceReward: 80,
        manaReward: 40,
        positionX: 550,
        positionY: 400,
        confirmationType: "MANUAL_REVIEW",
        minRank: 1
      },
      // Merge point
      {
        campaignId: campaign.id,
        name: "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —É—á–µ–Ω–∏—è",
        description: "–ü–∏–ª–æ—Ç—ã –∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–º–∞–Ω–¥–µ. –ü–æ—Å–µ—Ç–∏—Ç–µ –æ–±—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤.",
        missionType: "ATTEND_OFFLINE",
        experienceReward: 100,
        manaReward: 50,
        positionX: 400,
        positionY: 550,
        confirmationType: "QR_SCAN",
        minRank: 2
      },
      // Final
      {
        campaignId: campaign.id,
        name: "–í—ã–ø—É—Å–∫–Ω–æ–π –ø—Ä–æ–µ–∫—Ç",
        description: "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.",
        missionType: "CUSTOM",
        experienceReward: 150,
        manaReward: 75,
        positionX: 400,
        positionY: 700,
        confirmationType: "MANUAL_REVIEW",
        minRank: 2
      }
    ]
  });

  const createdMissions = await prisma.mission.findMany({
    where: { campaignId: campaign.id },
    orderBy: { positionY: 'asc' }
  });

  // Create branching dependencies
  const dependencies = [
    { sourceMissionId: createdMissions[0].id, targetMissionId: createdMissions[1].id }, // Start ‚Üí Choice
    { sourceMissionId: createdMissions[1].id, targetMissionId: createdMissions[2].id }, // Choice ‚Üí Pilot
    { sourceMissionId: createdMissions[1].id, targetMissionId: createdMissions[3].id }, // Choice ‚Üí Engineer
    { sourceMissionId: createdMissions[2].id, targetMissionId: createdMissions[4].id }, // Pilot ‚Üí Merge
    { sourceMissionId: createdMissions[3].id, targetMissionId: createdMissions[4].id }, // Engineer ‚Üí Merge
    { sourceMissionId: createdMissions[4].id, targetMissionId: createdMissions[5].id }, // Merge ‚Üí Final
  ];

  await prisma.missionDependency.createMany({
    data: dependencies
  });

  // Add competency mappings
  const competencyMappings = [
    { missionId: createdMissions[0].id, competencyId: competencies[0].id, points: 3 }, // Analytical thinking
    { missionId: createdMissions[2].id, competencyId: competencies[3].id, points: 5 }, // Stress resistance (pilot)
    { missionId: createdMissions[3].id, competencyId: competencies[7].id, points: 5 }, // Technical literacy (engineer)
    { missionId: createdMissions[4].id, competencyId: competencies[1].id, points: 4 }, // Teamwork
    { missionId: createdMissions[5].id, competencyId: competencies[2].id, points: 5 }, // Leadership
  ];

  await prisma.missionCompetency.createMany({
    data: competencyMappings
  });

  console.log(`‚úÖ Created branching campaign with ${createdMissions.length} missions`);
  return campaign;
}

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏: Start ‚Üí (A1, B1) ‚Üí (A2, B2) ‚Üí Final
async function createSpecializationCampaign(competencies: any[]) {
  console.log("‚ö° Creating '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
      description: "–°–ª–æ–∂–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
      theme: "advanced",
      themeConfig: {
        themeId: "esg-mission",
        funnelType: "growth",
        personas: ["volunteers", "professionals"],
        gamificationLevel: "balanced",
        motivationOverrides: {
          xp: "–í–∫–ª–∞–¥",
          mana: "–ò–º–ø–∞–∫—Ç",
          rank: "–°—Ç–∞—Ç—É—Å"
        },
        palette: {
          primary: "#22C55E",
          secondary: "#4ADE80",
          surface: "rgba(6, 24, 18, 0.9)"
        }
      },
      startDate: new Date(),
      endDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 days
    }
  });

  const missions = await prisma.mission.createMany({
    data: [
      // Start
      {
        campaignId: campaign.id,
        name: "–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞",
        description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.",
        missionType: "COMPLETE_QUIZ",
        experienceReward: 40,
        manaReward: 20,
        positionX: 400,
        positionY: 100,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Parallel Path A1
      {
        campaignId: campaign.id,
        name: "–õ–∏–¥–µ—Ä—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏",
        description: "–†–∞–∑–≤–∏—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π.",
        missionType: "CUSTOM",
        experienceReward: 70,
        manaReward: 35,
        positionX: 250,
        positionY: 250,
        confirmationType: "MANUAL_REVIEW",
        minRank: 1
      },
      // Parallel Path B1
      {
        campaignId: campaign.id,
        name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",
        description: "–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –°—Ç–∞–Ω—å—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏.",
        missionType: "UPLOAD_FILE",
        experienceReward: 70,
        manaReward: 35,
        positionX: 550,
        positionY: 250,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Parallel Path A2
      {
        campaignId: campaign.id,
        name: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
        description: "–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
        missionType: "CUSTOM",
        experienceReward: 90,
        manaReward: 45,
        positionX: 250,
        positionY: 400,
        confirmationType: "MANUAL_REVIEW",
        minRank: 2
      },
      // Parallel Path B2
      {
        campaignId: campaign.id,
        name: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        description: "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
        missionType: "CUSTOM",
        experienceReward: 90,
        manaReward: 45,
        positionX: 550,
        positionY: 400,
        confirmationType: "MANUAL_REVIEW",
        minRank: 2
      },
      // Final
      {
        campaignId: campaign.id,
        name: "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
        description: "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ: –≤–æ–∑–≥–ª–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç –∏–¥–µ–∏ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.",
        missionType: "ATTEND_OFFLINE",
        experienceReward: 200,
        manaReward: 100,
        positionX: 400,
        positionY: 550,
        confirmationType: "MANUAL_REVIEW",
        minRank: 3
      }
    ]
  });

  const createdMissions = await prisma.mission.findMany({
    where: { campaignId: campaign.id },
    orderBy: { positionY: 'asc' }
  });

  // Create parallel dependencies
  const dependencies = [
    { sourceMissionId: createdMissions[0].id, targetMissionId: createdMissions[1].id }, // Start ‚Üí A1
    { sourceMissionId: createdMissions[0].id, targetMissionId: createdMissions[2].id }, // Start ‚Üí B1
    { sourceMissionId: createdMissions[1].id, targetMissionId: createdMissions[3].id }, // A1 ‚Üí A2
    { sourceMissionId: createdMissions[2].id, targetMissionId: createdMissions[4].id }, // B1 ‚Üí B2
    { sourceMissionId: createdMissions[3].id, targetMissionId: createdMissions[5].id }, // A2 ‚Üí Final
    { sourceMissionId: createdMissions[4].id, targetMissionId: createdMissions[5].id }, // B2 ‚Üí Final
  ];

  await prisma.missionDependency.createMany({
    data: dependencies
  });

  // Add competency mappings
  const competencyMappings = [
    { missionId: createdMissions[0].id, competencyId: competencies[0].id, points: 2 }, // Analytical thinking
    { missionId: createdMissions[1].id, competencyId: competencies[2].id, points: 4 }, // Leadership
    { missionId: createdMissions[2].id, competencyId: competencies[7].id, points: 4 }, // Technical literacy  
    { missionId: createdMissions[3].id, competencyId: competencies[0].id, points: 5 }, // Analytical thinking
    { missionId: createdMissions[4].id, competencyId: competencies[5].id, points: 5 }, // Creativity
    { missionId: createdMissions[5].id, competencyId: competencies[1].id, points: 5 }, // Teamwork
    { missionId: createdMissions[5].id, competencyId: competencies[2].id, points: 3 }, // Leadership
  ];

  await prisma.missionCompetency.createMany({
    data: competencyMappings
  });

  console.log(`‚úÖ Created parallel campaign with ${createdMissions.length} missions`);
  return campaign;
}

// Corporate Onboarding Campaign (Corporate Metropolis theme)
async function createCorporateCampaign(competencies: any[]) {
  console.log("üè¢ Creating '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
      description: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ onboarding –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ñ–æ–∫—É—Å –Ω–∞ KPI –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö.",
      theme: "corporate",
      themeConfig: {
        themeId: "corporate-metropolis",
        funnelType: "onboarding",
        personas: ["professionals"],
        gamificationLevel: "low",
        motivationOverrides: {
          xp: "KPI",
          mana: "–ë–æ–Ω—É—Å—ã",
          rank: "–°—Ç–∞—Ç—É—Å",
        },
        palette: {
          primary: "#38BDF8",
          secondary: "#0EA5E9",
          surface: "rgba(8, 16, 32, 0.9)",
        },
      },
      startDate: new Date(),
      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
    },
  });

  const missions = [
    { name: "Welcome: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞", description: "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏", type: "WATCH_VIDEO", experience: 50, mana: 20, competency: competencies[4], x: 300, y: 100 },
    { name: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π", description: "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∫–æ–ª–ª–µ–≥–∞–º", type: "SUBMIT_FORM", experience: 80, mana: 30, competency: competencies[1], x: 500, y: 100 },
    { name: "–ò–∑—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", description: "–û–±—É—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º", type: "COMPLETE_QUIZ", experience: 120, mana: 50, competency: competencies[7], x: 700, y: 100 },
  ];

  const createdMissions = [];
  for (let i = 0; i < missions.length; i++) {
    const mission = missions[i];
    const created = await prisma.mission.create({
      data: {
        campaignId: campaign.id,
        name: mission.name,
        description: mission.description,
        missionType: mission.type as any,
        experienceReward: mission.experience,
        manaReward: mission.mana,
        positionX: mission.x,
        positionY: mission.y,
        confirmationType: "AUTO",
        minRank: 1,
        competencies: { create: { competencyId: mission.competency.id, points: 2 } },
      },
    });
    createdMissions.push(created);
    if (i > 0) {
      await prisma.missionDependency.create({
        data: { sourceMissionId: createdMissions[i - 1].id, targetMissionId: created.id },
      });
    }
  }

  console.log(`‚úÖ Created corporate campaign with ${createdMissions.length} missions`);
  return campaign;
}

// ESG Program Campaign (ESG Mission theme)
async function createESGCampaign(competencies: any[]) {
  console.log("üå± Creating '–ü—Ä–æ–≥—Ä–∞–º–º–∞ ESG' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ ESG: –≤–∫–ª–∞–¥ –≤ –±—É–¥—É—â–µ–µ",
      description: "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —ç–∫–æ–ª–æ–≥–∏—é.",
      theme: "esg",
      themeConfig: {
        themeId: "esg-mission",
        funnelType: "esg",
        personas: ["volunteers"],
        gamificationLevel: "balanced",
        motivationOverrides: {
          xp: "–í–∫–ª–∞–¥",
          mana: "–ò–º–ø–∞–∫—Ç",
          rank: "–°—Ç–∞—Ç—É—Å",
        },
        palette: {
          primary: "#22C55E",
          secondary: "#4ADE80",
          surface: "rgba(6, 24, 18, 0.9)",
        },
      },
      startDate: new Date(),
      endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),
    },
  });

  const missions = [
    { name: "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –æ—Ñ–∏—Å–∞", description: "–û—Ü–µ–Ω–∫–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", type: "SUBMIT_FORM", experience: 100, mana: 40, competency: competencies[0], x: 300, y: 100 },
    { name: "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∞—è –∞–∫—Ü–∏—è: –ø–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤", description: "–£—á–∞—Å—Ç–∏–µ –≤ –≤—ã—Å–∞–¥–∫–µ –¥–µ—Ä–µ–≤—å–µ–≤", type: "ATTEND_OFFLINE", experience: 150, mana: 80, competency: competencies[1], x: 500, y: 100 },
    { name: "–û—Ç—á—ë—Ç –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º –∏–º–ø–∞–∫—Ç–µ", description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ", type: "UPLOAD_FILE", experience: 120, mana: 60, competency: competencies[4], x: 700, y: 100 },
  ];

  const createdMissions = [];
  for (let i = 0; i < missions.length; i++) {
    const mission = missions[i];
    const created = await prisma.mission.create({
      data: {
        campaignId: campaign.id,
        name: mission.name,
        description: mission.description,
        missionType: mission.type as any,
        experienceReward: mission.experience,
        manaReward: mission.mana,
        positionX: mission.x,
        positionY: mission.y,
        confirmationType: mission.type === "ATTEND_OFFLINE" ? "MANUAL_REVIEW" : "AUTO",
        minRank: 1,
        competencies: { create: { competencyId: mission.competency.id, points: 3 } },
      },
    });
    createdMissions.push(created);
    if (i > 0) {
      await prisma.missionDependency.create({
        data: { sourceMissionId: createdMissions[i - 1].id, targetMissionId: created.id },
      });
    }
  }

  console.log(`‚úÖ Created ESG campaign with ${createdMissions.length} missions`);
  return campaign;
}

// Create rank system with progressive requirements
async function createRankSystem() {
  console.log("üéñÔ∏è Creating rank system...");

  const ranks = [
    {
      level: 1,
      name: "–ò—Å–∫–∞—Ç–µ–ª—å",
      title: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å–∫–∏—Ç–∞–ª–µ—Ü",
      description: "–ü–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–≤–µ–∑–¥–∞–º. –í—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
      minExperience: 0,
      minMissions: 0,
      requiredCompetencies: {},
      rewards: { mana: 0, badge: "seeker_star" }
    },
    {
      level: 2,
      name: "–ü–∏–ª–æ—Ç-–∫–∞–Ω–¥–∏–¥–∞—Ç",
      title: "–ë—É–¥—É—â–∏–π –ø–æ–∫–æ—Ä–∏—Ç–µ–ª—å –∑–≤–µ–∑–¥",
      description: "–í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º.",
      minExperience: 150,
      minMissions: 3,
      requiredCompetencies: { "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 2 },
      rewards: { mana: 50, badge: "pilot_wings" }
    },
    {
      level: 3,
      name: "–ö–∞–¥–µ—Ç",
      title: "–ß–ª–µ–Ω —ç–∫–∏–ø–∞–∂–∞",
      description: "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã. –í—ã –¥–æ–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.",
      minExperience: 400,
      minMissions: 8,
      requiredCompetencies: { "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 3, "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 2 },
      rewards: { mana: 100, badge: "cadet_emblem" }
    },
    {
      level: 4,
      name: "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
      title: "–ú–ª–∞–¥—à–∏–π –æ—Ñ–∏—Ü–µ—Ä",
      description: "–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã.",
      minExperience: 750,
      minMissions: 15,
      requiredCompetencies: { "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 4, "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": 3 },
      rewards: { mana: 200, badge: "lieutenant_stripes" }
    },
    {
      level: 5,
      name: "–ö–∞–ø–∏—Ç–∞–Ω",
      title: "–ö–æ–º–∞–Ω–¥–∏—Ä –∑–≤–µ–∑–¥–æ–ª–µ—Ç–∞",
      description: "–í—ã—Å—à–∏–π —Ä–∞–Ω–≥ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–∞–¥–µ—Ç–æ–≤. –í—ã - –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.",
      minExperience: 1200,
      minMissions: 25,
      requiredCompetencies: { "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 5, "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 4, "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 4 },
      rewards: { mana: 500, badge: "captain_insignia" }
    }
  ];

  const createdRanks = [];
  for (const rank of ranks) {
    const existing = await prisma.rank.findFirst({
      where: { level: rank.level }
    });
    
    const created = existing || await prisma.rank.create({
      data: rank
    });
    
    createdRanks.push(created);
  }

  return createdRanks;
}

// Create store items for spending mana
async function createStoreItems() {
  console.log("üè™ Creating store items...");

  const items = [
    // –ú–µ—Ä—á
    {
      name: "–ö—Ä—É–∂–∫–∞ '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ñ–µ'",
      description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∫—Ä—É–∂–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏–∏",
      price: 150,
      category: ItemCategory.MERCH,
      imageUrl: null,
      isAvailable: true
    },
    {
      name: "–§—É—Ç–±–æ–ª–∫–∞ '–ö–∞–¥–µ—Ç –≥–∞–ª–∞–∫—Ç–∏–∫–∏'",
      description: "–£–¥–æ–±–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ø—Ä–∏–Ω—Ç–æ–º –∑–≤–µ–∑–¥–Ω–æ–π –∫–∞—Ä—Ç—ã",
      price: 300,
      category: ItemCategory.MERCH,
      imageUrl: null,
      isAvailable: true
    },
    {
      name: "–ë–ª–æ–∫–Ω–æ—Ç '–ë–æ—Ä—Ç–æ–≤–æ–π –∂—É—Ä–Ω–∞–ª'",
      description: "–°—Ç–∏–ª—å–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∏–¥–µ–π",
      price: 100,
      category: ItemCategory.MERCH,
      imageUrl: null,
      isAvailable: true
    },
    
    // –ë–æ–Ω—É—Å—ã
    {
      name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏",
      description: "3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–æ–≤",
      price: 50,
      category: ItemCategory.BONUS,
      imageUrl: null,
      isAvailable: true
    },
    {
      name: "–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
      description: "+50% –æ–ø—ã—Ç–∞ –∑–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏—Å—Å–∏—é",
      price: 75,
      category: ItemCategory.BONUS,
      imageUrl: null,
      isAvailable: true
    },
    {
      name: "VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
      description: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è",
      price: 200,
      category: ItemCategory.BONUS,
      imageUrl: null,
      isAvailable: true
    },

    // –ë–µ–π–¥–∂–∏
    {
      name: "–ë–µ–π–¥–∂ '–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü'",
      description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –±–µ–π–¥–∂ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 –∫–∞–¥–µ—Ç–æ–≤",
      price: 500,
      category: ItemCategory.BADGE,
      imageUrl: null,
      isAvailable: true
    },
    {
      name: "–ë–µ–π–¥–∂ '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫'",
      description: "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂ –¥–ª—è –ø–æ–º–æ—â–∏ –Ω–æ–≤—ã–º –∫–∞–¥–µ—Ç–∞–º",
      price: 400,
      category: ItemCategory.BADGE,
      imageUrl: null,
      isAvailable: true
    },

    // –ê–≤–∞—Ç–∞—Ä—ã
    {
      name: "–ê–≤–∞—Ç–∞—Ä '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å'",
      description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –≤ —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è",
      price: 250,
      category: ItemCategory.AVATAR,
      imageUrl: null,
      isAvailable: true
    },
    {
      name: "–ê–≤–∞—Ç–∞—Ä '–ö–∞–ø–∏—Ç–∞–Ω –∫–æ—Ä–∞–±–ª—è'",
      description: "–ê–≤–∞—Ç–∞—Ä –≤ —Ñ–æ—Ä–º–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –∑–≤–µ–∑–¥–æ–ª–µ—Ç–∞",
      price: 600,
      category: ItemCategory.AVATAR,
      imageUrl: null,
      isAvailable: false // Unlock at Captain rank
    }
  ];

  const createdItems = [];
  for (const item of items) {
    const existing = await prisma.storeItem.findFirst({
      where: { name: item.name }
    });
    
    const created = existing || await prisma.storeItem.create({
      data: item
    });
    
    createdItems.push(created);
  }

  return createdItems;
}

// Create cadet users with mission progress
async function createCadetUsers(campaigns: any[], competencies: any[]) {
  console.log("üë• Creating cadet users with progress...");
  
  const { UserRole, MissionStatus } = await import("@/generated/prisma");
  
  const users = [
    {
      id: "u-cadet-student",
      email: "cadet.student@example.com",
      displayName: "–ê–ª–µ–∫—Å –ù–æ–≤–∏–∫–æ–≤",
      role: UserRole.CADET,
      experience: 250,
      mana: 120,
      currentRank: 2,
      campaignIndex: 0, // Galactic Academy - –ü—É—Ç—å –≤ –∫–æ—Å–º–æ—Å
      completedMissions: 3
    },
    {
      id: "u-cadet-professional",
      email: "cadet.pro@example.com",
      displayName: "–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞",
      role: UserRole.CADET,
      experience: 450,
      mana: 80,
      currentRank: 3,
      campaignIndex: 3, // Corporate Metropolis
      completedMissions: 2
    },
    {
      id: "u-cadet-volunteer",
      email: "cadet.volunteer@example.com",
      displayName: "–ò–≤–∞–Ω –ó–µ–ª–µ–Ω—Å–∫–∏–π",
      role: UserRole.CADET,
      experience: 180,
      mana: 200,
      currentRank: 2,
      campaignIndex: 4, // ESG Mission
      completedMissions: 2
    }
  ];
  
  const createdUsers = [];
  
  for (const userData of users) {
    // Create or update user
    const user = await prisma.user.upsert({
      where: { id: userData.id },
      update: {
        experience: userData.experience,
        mana: userData.mana,
        currentRank: userData.currentRank
      },
      create: {
        id: userData.id,
        email: userData.email,
        displayName: userData.displayName,
        role: userData.role,
        experience: userData.experience,
        mana: userData.mana,
        currentRank: userData.currentRank
      }
    });
    
    createdUsers.push(user);
    
    // Get the campaign missions
    const campaign = campaigns[userData.campaignIndex];
    if (!campaign) continue;
    
    const missions = await prisma.mission.findMany({
      where: { campaignId: campaign.id },
      orderBy: { positionY: 'asc' },
      include: {
        dependenciesTo: true,
        competencies: true
      }
    });
    
    // Create user missions with some completed
    for (let i = 0; i < missions.length; i++) {
      const mission = missions[i];
      let status: any = MissionStatus.LOCKED;
      let completedAt: Date | null = null;
      
      if (i < userData.completedMissions) {
        status = MissionStatus.COMPLETED;
        completedAt = new Date(Date.now() - (userData.completedMissions - i) * 24 * 60 * 60 * 1000);
      } else if (i === userData.completedMissions) {
        status = MissionStatus.AVAILABLE;
      }
      
      await prisma.userMission.upsert({
        where: {
          userId_missionId: {
            userId: user.id,
            missionId: mission.id
          }
        },
        update: {
          status,
          completedAt
        },
        create: {
          userId: user.id,
          missionId: mission.id,
          status,
          completedAt,
          startedAt: status === MissionStatus.AVAILABLE ? new Date() : null
        }
      });
      
      // Add competency points for completed missions
      if (status === MissionStatus.COMPLETED && mission.competencies.length > 0) {
        for (const missionComp of mission.competencies) {
          await prisma.userCompetency.upsert({
            where: {
              userId_competencyId: {
                userId: user.id,
                competencyId: missionComp.competencyId
              }
            },
            update: {
              points: {
                increment: missionComp.points
              }
            },
            create: {
              userId: user.id,
              competencyId: missionComp.competencyId,
              points: missionComp.points
            }
          });
        }
      }
    }
  }
  
  return createdUsers;
}

// Execute seeding if run directly
if (require.main === module) {
  seedDatabase()
    .then((result) => {
      console.log('üéâ Seeding completed:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Seeding failed:', error);
      process.exit(1);
    });
}
