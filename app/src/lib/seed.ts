import { prisma } from "./prisma";

export async function seedDatabase() {
  try {
    console.log("üå± Starting database seeding...");

    // Create basic competencies
    const competencies = [
      { name: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", iconUrl: null },
      { name: "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", iconUrl: null },
      { name: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", iconUrl: null },
      { name: "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", iconUrl: null },
      { name: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", iconUrl: null },
      { name: "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", iconUrl: null },
      { name: "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", iconUrl: null },
      { name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", iconUrl: null },
    ];

    const createdCompetencies = [];
    for (const competency of competencies) {
      const existing = await prisma.competency.findFirst({
        where: { name: competency.name }
      });
      
      const created = existing || await prisma.competency.create({
        data: competency
      });
      
      createdCompetencies.push(created);
    }

    console.log(`üìö Created ${createdCompetencies.length} competencies`);

    // Create demo campaigns with missions
    const campaigns = await createDemoCampaigns(createdCompetencies);
    
    console.log("‚úÖ Database seeded successfully");
    
    return {
      competencies: competencies.length,
      campaigns: campaigns.length
    };
  } catch (error) {
    console.error("‚ùå Failed to seed database:", error);
    throw error;
  }
}

async function createDemoCampaigns(competencies: Array<{ id: string; name: string }>) {
  const campaigns = [];

  // 1. –õ–∏–Ω–µ–π–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ "–ü—É—Ç—å –≤ –∫–æ—Å–º–æ—Å"
  const spaceJourney = await createSpaceJourneyCampaign(competencies);
  campaigns.push(spaceJourney);

  // 2. –í–æ—Ä–æ–Ω–∫–∞ —Å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º "–ê–∫–∞–¥–µ–º–∏—è –∫–∞–¥–µ—Ç–æ–≤"
  const academy = await createAcademyCampaign(competencies);
  campaigns.push(academy);

  // 3. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
  const specialization = await createSpecializationCampaign(competencies);
  campaigns.push(specialization);

  return campaigns;
}

// –õ–∏–Ω–µ–π–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞: A ‚Üí B ‚Üí C ‚Üí D ‚Üí E
async function createSpaceJourneyCampaign(competencies: Array<{ id: string; name: string }>) {
  console.log("üöÄ Creating '–ü—É—Ç—å –≤ –∫–æ—Å–º–æ—Å' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ü—É—Ç—å –≤ –∫–æ—Å–º–æ—Å",
      description: "–õ–∏–Ω–µ–π–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –æ—Ç–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –∫–æ—Å–º–æ–Ω–∞–≤—Ç—ã. –ö–∞–∂–¥—ã–π —à–∞–≥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.",
      theme: "cosmic",
      startDate: new Date(),
      endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days
    }
  });

  // const missions = await prisma.mission.createMany({
  await prisma.mission.createMany({
    data: [
      {
        campaignId: campaign.id,
        name: "–î–æ—Å—å–µ –∫–∞–¥–µ—Ç–∞",
        description: "–ö–æ–º–∞–Ω–¥–∏—Ä, –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–≥–æ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –ø—É—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –¥–æ—Å—å–µ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ —Ñ–ª–æ—Ç–∞. –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≤–µ–ª–∏–∫–∏–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º!",
        missionType: "FILE_UPLOAD",
        experienceReward: 50,
        manaReward: 25,
        positionX: 400,
        positionY: 100,
        confirmationType: "AUTO",
        minRank: 1
      },
      {
        campaignId: campaign.id,
        name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä",
        description: "–ü—Ä–æ–π–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –∑–≤–µ–∑–¥–æ–ª–µ—Ç–∞. –ü–æ–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–ª–µ—Ç–∞–º –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏!",
        missionType: "QUIZ",
        experienceReward: 75,
        manaReward: 35,
        positionX: 400,
        positionY: 250,
        confirmationType: "AUTO",
        minRank: 1
      },
      {
        campaignId: campaign.id,
        name: "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–º",
        description: "–Ø–≤–∏—Ç–µ—Å—å –Ω–∞ –±—Ä–∏—Ñ–∏–Ω–≥ –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä. –õ–∏—á–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º —Ñ–ª–æ—Ç–∞ - —á–µ—Å—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –∫–∞–¥–µ—Ç–∞!",
        missionType: "OFFLINE_EVENT",
        experienceReward: 100,
        manaReward: 50,
        positionX: 400,
        positionY: 400,
        confirmationType: "QR_SCAN",
        minRank: 1
      },
      {
        campaignId: campaign.id,
        name: "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        description: "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é '–ú–æ—è –ø–ª–∞–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ 100 –ª–µ—Ç'. –ü–æ–∫–∞–∂–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–∏–¥–µ–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ –Ω–∞—à–µ–π –≥–∞–ª–∞–∫—Ç–∏–∫–∏!",
        missionType: "CUSTOM",
        experienceReward: 125,
        manaReward: 60,
        positionX: 400,
        positionY: 550,
        confirmationType: "MANUAL_REVIEW",
        minRank: 2
      },
      {
        campaignId: campaign.id,
        name: "–í—ã–ø—É—Å–∫ –∏–∑ –∞–∫–∞–¥–µ–º–∏–∏",
        description: "–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ—Ä–µ–º–æ–Ω–∏—è –ø–æ—Å–≤—è—â–µ–Ω–∏—è –≤ –∫–∞–¥–µ—Ç—ã –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–ª–æ—Ç–∞. –ü–æ–ª—É—á–∏—Ç–µ –∑–≤–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º!",
        missionType: "OFFLINE_EVENT",
        experienceReward: 200,
        manaReward: 100,
        positionX: 400,
        positionY: 700,
        confirmationType: "MANUAL_REVIEW",
        minRank: 3
      }
    ]
  });

  // Get created missions to create dependencies
  const createdMissions = await prisma.mission.findMany({
    where: { campaignId: campaign.id },
    orderBy: { positionY: 'asc' }
  });

  // Create linear dependencies: [0] ‚Üí [1] ‚Üí [2] ‚Üí [3] ‚Üí [4]
  const dependencies = [];
  for (let i = 0; i < createdMissions.length - 1; i++) {
    dependencies.push({
      sourceMissionId: createdMissions[i].id,
      targetMissionId: createdMissions[i + 1].id
    });
  }

  await prisma.missionDependency.createMany({
    data: dependencies
  });

  // Add competency mappings
  const competencyMappings = [
    { missionId: createdMissions[1].id, competencyId: competencies[7].id, points: 3 }, // Tech literacy
    { missionId: createdMissions[2].id, competencyId: competencies[4].id, points: 5 }, // Communication
    { missionId: createdMissions[3].id, competencyId: competencies[5].id, points: 4 }, // Creativity
    { missionId: createdMissions[4].id, competencyId: competencies[2].id, points: 5 }, // Leadership
  ];

  await prisma.missionCompetency.createMany({
    data: competencyMappings
  });

  console.log(`‚úÖ Created linear campaign with ${createdMissions.length} missions`);
  return campaign;
}

// –í–æ—Ä–æ–Ω–∫–∞ —Å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º: Start ‚Üí Choice ‚Üí Branch A/B ‚Üí Merge ‚Üí Final
async function createAcademyCampaign(competencies: Array<{ id: string; name: string }>) {
  console.log("üè´ Creating '–ê–∫–∞–¥–µ–º–∏—è –∫–∞–¥–µ—Ç–æ–≤' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ê–∫–∞–¥–µ–º–∏—è –∫–∞–¥–µ—Ç–æ–≤",
      description: "–í–æ—Ä–æ–Ω–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ—Å–ª–µ –æ–±—â–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞–¥–µ—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç –ø—É—Ç—å –ø–∏–ª–æ—Ç–∞ –∏–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞.",
      theme: "academy",
      startDate: new Date(),
      endDate: new Date(Date.now() + 120 * 24 * 60 * 60 * 1000), // 120 days
    }
  });

  // const missions = await prisma.mission.createMany({
  await prisma.mission.createMany({
    data: [
      // Start
      {
        campaignId: campaign.id,
        name: "–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è",
        description: "–ü—Ä–æ–π–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∞–∫–∞–¥–µ–º–∏—é. –û—Ü–µ–Ω–∏–º –≤–∞—à–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.",
        missionType: "QUIZ",
        experienceReward: 60,
        manaReward: 30,
        positionX: 400,
        positionY: 100,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Choice point
      {
        campaignId: campaign.id,
        name: "–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        description: "–ò–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å: —Å—Ç–∞–Ω–µ—Ç–µ –ª–∏ –≤—ã –ø–∏–ª–æ—Ç–æ–º –∏–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º?",
        missionType: "CUSTOM",
        experienceReward: 40,
        manaReward: 20,
        positionX: 400,
        positionY: 250,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Branch A - Pilot path
      {
        campaignId: campaign.id,
        name: "–õ–µ—Ç–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–ª–æ—Ç–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥–æ–ª–µ—Ç–æ–º, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∫–æ—Å–º–æ—Å–µ, —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–∞–Ω–µ–≤—Ä—ã.",
        missionType: "QUIZ",
        experienceReward: 80,
        manaReward: 40,
        positionX: 250,
        positionY: 400,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Branch B - Engineer path  
      {
        campaignId: campaign.id,
        name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–∞: —Ä–µ–º–æ–Ω—Ç —Å–∏—Å—Ç–µ–º, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π.",
        missionType: "CUSTOM",
        experienceReward: 80,
        manaReward: 40,
        positionX: 550,
        positionY: 400,
        confirmationType: "MANUAL_REVIEW",
        minRank: 1
      },
      // Merge point
      {
        campaignId: campaign.id,
        name: "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —É—á–µ–Ω–∏—è",
        description: "–ü–∏–ª–æ—Ç—ã –∏ –∏–Ω–∂–µ–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–º–∞–Ω–¥–µ. –ü–æ—Å–µ—Ç–∏—Ç–µ –æ–±—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤.",
        missionType: "OFFLINE_EVENT",
        experienceReward: 100,
        manaReward: 50,
        positionX: 400,
        positionY: 550,
        confirmationType: "QR_SCAN",
        minRank: 2
      },
      // Final
      {
        campaignId: campaign.id,
        name: "–í—ã–ø—É—Å–∫–Ω–æ–π –ø—Ä–æ–µ–∫—Ç",
        description: "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.",
        missionType: "CUSTOM",
        experienceReward: 150,
        manaReward: 75,
        positionX: 400,
        positionY: 700,
        confirmationType: "MANUAL_REVIEW",
        minRank: 2
      }
    ]
  });

  const createdMissions = await prisma.mission.findMany({
    where: { campaignId: campaign.id },
    orderBy: { positionY: 'asc' }
  });

  // Create branching dependencies
  const dependencies = [
    { sourceMissionId: createdMissions[0].id, targetMissionId: createdMissions[1].id }, // Start ‚Üí Choice
    { sourceMissionId: createdMissions[1].id, targetMissionId: createdMissions[2].id }, // Choice ‚Üí Pilot
    { sourceMissionId: createdMissions[1].id, targetMissionId: createdMissions[3].id }, // Choice ‚Üí Engineer
    { sourceMissionId: createdMissions[2].id, targetMissionId: createdMissions[4].id }, // Pilot ‚Üí Merge
    { sourceMissionId: createdMissions[3].id, targetMissionId: createdMissions[4].id }, // Engineer ‚Üí Merge
    { sourceMissionId: createdMissions[4].id, targetMissionId: createdMissions[5].id }, // Merge ‚Üí Final
  ];

  await prisma.missionDependency.createMany({
    data: dependencies
  });

  // Add competency mappings
  const competencyMappings = [
    { missionId: createdMissions[0].id, competencyId: competencies[0].id, points: 3 }, // Analytical thinking
    { missionId: createdMissions[2].id, competencyId: competencies[3].id, points: 5 }, // Stress resistance (pilot)
    { missionId: createdMissions[3].id, competencyId: competencies[7].id, points: 5 }, // Technical literacy (engineer)
    { missionId: createdMissions[4].id, competencyId: competencies[1].id, points: 4 }, // Teamwork
    { missionId: createdMissions[5].id, competencyId: competencies[2].id, points: 5 }, // Leadership
  ];

  await prisma.missionCompetency.createMany({
    data: competencyMappings
  });

  console.log(`‚úÖ Created branching campaign with ${createdMissions.length} missions`);
  return campaign;
}

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏: Start ‚Üí (A1, B1) ‚Üí (A2, B2) ‚Üí Final
async function createSpecializationCampaign(competencies: Array<{ id: string; name: string }>) {
  console.log("‚ö° Creating '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è' campaign...");

  const campaign = await prisma.campaign.create({
    data: {
      name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
      description: "–°–ª–æ–∂–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
      theme: "advanced",
      startDate: new Date(),
      endDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 days
    }
  });

  // const missions = await prisma.mission.createMany({
  await prisma.mission.createMany({
    data: [
      // Start
      {
        campaignId: campaign.id,
        name: "–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞",
        description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.",
        missionType: "QUIZ",
        experienceReward: 40,
        manaReward: 20,
        positionX: 400,
        positionY: 100,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Parallel Path A1
      {
        campaignId: campaign.id,
        name: "–õ–∏–¥–µ—Ä—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏",
        description: "–†–∞–∑–≤–∏—Ç–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π.",
        missionType: "CUSTOM",
        experienceReward: 70,
        manaReward: 35,
        positionX: 250,
        positionY: 250,
        confirmationType: "MANUAL_REVIEW",
        minRank: 1
      },
      // Parallel Path B1
      {
        campaignId: campaign.id,
        name: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞",
        description: "–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º. –°—Ç–∞–Ω—å—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏.",
        missionType: "FILE_UPLOAD",
        experienceReward: 70,
        manaReward: 35,
        positionX: 550,
        positionY: 250,
        confirmationType: "AUTO",
        minRank: 1
      },
      // Parallel Path A2
      {
        campaignId: campaign.id,
        name: "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
        description: "–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
        missionType: "CUSTOM",
        experienceReward: 90,
        manaReward: 45,
        positionX: 250,
        positionY: 400,
        confirmationType: "MANUAL_REVIEW",
        minRank: 2
      },
      // Parallel Path B2
      {
        campaignId: campaign.id,
        name: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        description: "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
        missionType: "CUSTOM",
        experienceReward: 90,
        manaReward: 45,
        positionX: 550,
        positionY: 400,
        confirmationType: "MANUAL_REVIEW",
        minRank: 2
      },
      // Final
      {
        campaignId: campaign.id,
        name: "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
        description: "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ: –≤–æ–∑–≥–ª–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç –∏–¥–µ–∏ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.",
        missionType: "OFFLINE_EVENT",
        experienceReward: 200,
        manaReward: 100,
        positionX: 400,
        positionY: 550,
        confirmationType: "MANUAL_REVIEW",
        minRank: 3
      }
    ]
  });

  const createdMissions = await prisma.mission.findMany({
    where: { campaignId: campaign.id },
    orderBy: { positionY: 'asc' }
  });

  // Create parallel dependencies
  const dependencies = [
    { sourceMissionId: createdMissions[0].id, targetMissionId: createdMissions[1].id }, // Start ‚Üí A1
    { sourceMissionId: createdMissions[0].id, targetMissionId: createdMissions[2].id }, // Start ‚Üí B1
    { sourceMissionId: createdMissions[1].id, targetMissionId: createdMissions[3].id }, // A1 ‚Üí A2
    { sourceMissionId: createdMissions[2].id, targetMissionId: createdMissions[4].id }, // B1 ‚Üí B2
    { sourceMissionId: createdMissions[3].id, targetMissionId: createdMissions[5].id }, // A2 ‚Üí Final
    { sourceMissionId: createdMissions[4].id, targetMissionId: createdMissions[5].id }, // B2 ‚Üí Final
  ];

  await prisma.missionDependency.createMany({
    data: dependencies
  });

  // Add competency mappings
  const competencyMappings = [
    { missionId: createdMissions[0].id, competencyId: competencies[0].id, points: 2 }, // Analytical thinking
    { missionId: createdMissions[1].id, competencyId: competencies[2].id, points: 4 }, // Leadership
    { missionId: createdMissions[2].id, competencyId: competencies[7].id, points: 4 }, // Technical literacy  
    { missionId: createdMissions[3].id, competencyId: competencies[0].id, points: 5 }, // Analytical thinking
    { missionId: createdMissions[4].id, competencyId: competencies[5].id, points: 5 }, // Creativity
    { missionId: createdMissions[5].id, competencyId: competencies[1].id, points: 5 }, // Teamwork
    { missionId: createdMissions[5].id, competencyId: competencies[2].id, points: 3 }, // Leadership
  ];

  await prisma.missionCompetency.createMany({
    data: competencyMappings
  });

  console.log(`‚úÖ Created parallel campaign with ${createdMissions.length} missions`);
  return campaign;
}

// Execute seeding if run directly
if (require.main === module) {
  seedDatabase()
    .then((result) => {
      console.log('üéâ Seeding completed:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Seeding failed:', error);
      process.exit(1);
    });
}
