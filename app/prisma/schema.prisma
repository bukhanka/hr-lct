// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id          String           @id @default(cuid())
  name        String
  slug        String?          @unique // Для красивых invite URLs: /join/cosmic-journey
  description String?
  theme       String?
  themeConfig Json?
  startDate   DateTime?
  endDate     DateTime?
  category    CampaignCategory @default(ONBOARDING)
  targetRole  String?
  isActive    Boolean          @default(true)
  
  // Business Context (Campaign Brief)
  businessGoal     String?  // Бизнес-цель кампании
  targetAudience   Json?    // { segment, size, characteristics }
  successMetrics   Json?    // { primary, secondary, conversionFunnel }
  companyContext   Json?    // { why, timeline, stakeholders }
  briefCompleted   Boolean  @default(false) // Флаг заполненности бизнес-контекста
  
  // A/B Testing
  isVariant   Boolean          @default(false)
  parentCampaignId String?
  variantName String?
  
  missions  Mission[]
  ranks     Rank[] // Кастомные ранги для кампании
  parentCampaign Campaign? @relation("CampaignVariants", fields: [parentCampaignId], references: [id], onDelete: Cascade)
  variants Campaign[] @relation("CampaignVariants")
  userAssignments UserCampaignVariant[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Mission {
  id               String           @id @default(cuid())
  campaignId       String
  name             String
  description      String?
  missionType      MissionType
  experienceReward Int              @default(0)
  manaReward       Int              @default(0)
  positionX        Float            @default(0)
  positionY        Float            @default(0)
  confirmationType ConfirmationType
  minRank          Int              @default(0)
  payload          Json? // Содержит данные для каждого типа миссии
  
  // Media assets from Content Studio
  iconUrl          String? // Иконка миссии из Content Studio
  backgroundImage  String? // Фоновое изображение для карточки миссии
  backgroundMusic  String? // Фоновая музыка для миссии
  narrationAudio   String? // Озвучка описания миссии
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  campaign         Campaign            @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  dependenciesFrom MissionDependency[] @relation("MissionDependencyFrom")
  dependenciesTo   MissionDependency[] @relation("MissionDependencyTo")
  competencies     MissionCompetency[]
  userMissions     UserMission[]
}

model MissionDependency {
  id              String  @id @default(cuid())
  sourceMission   Mission @relation("MissionDependencyFrom", fields: [sourceMissionId], references: [id], onDelete: Cascade)
  sourceMissionId String
  targetMission   Mission @relation("MissionDependencyTo", fields: [targetMissionId], references: [id], onDelete: Cascade)
  targetMissionId String

  @@unique([sourceMissionId, targetMissionId])
}

model Competency {
  id      String  @id @default(cuid())
  name    String
  iconUrl String?

  missionCompetencies MissionCompetency[]
  userCompetencies    UserCompetency[]
}

model MissionCompetency {
  id           String @id @default(cuid())
  missionId    String
  competencyId String
  points       Int    @default(0)

  mission    Mission    @relation(fields: [missionId], references: [id], onDelete: Cascade)
  competency Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  @@unique([missionId, competencyId])
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  displayName   String?
  role          UserRole           @default(CADET)
  avatarUrl     String?
  experience    Int                @default(0)
  mana          Int                @default(0)
  currentRank   Int                @default(1)
  competencies  UserCompetency[]
  userMissions  UserMission[]
  purchases     UserPurchase[]
  notifications UserNotification[]
  variantAssignments UserCampaignVariant[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model UserCompetency {
  id           String @id @default(cuid())
  userId       String
  competencyId String
  points       Int    @default(0)

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  competency Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  @@unique([userId, competencyId])
}

model UserMission {
  id          String        @id @default(cuid())
  userId      String
  missionId   String
  status      MissionStatus @default(LOCKED)
  startedAt   DateTime?
  completedAt DateTime?
  submission  Json?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@unique([userId, missionId])
}

enum MissionType {
  SUBMIT_FORM // Отправка формы/опроса
  UPLOAD_FILE // Загрузка файла
  COMPLETE_QUIZ // Прохождение теста
  WATCH_VIDEO // Просмотр видео
  ATTEND_OFFLINE // Посещение очного мероприятия
  ATTEND_ONLINE // Посещение онлайн-мероприятия
  EXTERNAL_ACTION // Действие во внешней системе
  CUSTOM // Кастомное задание
  SURVEY // Опрос с открытыми вопросами
  CODE_CHALLENGE // Задача по программированию
  TEAM_MISSION // Командная миссия
  TIMED_CHALLENGE // Задание с ограничением по времени
}

enum ConfirmationType {
  AUTO
  MANUAL_REVIEW
  QR_SCAN
  FILE_CHECK
}

enum MissionStatus {
  LOCKED
  AVAILABLE
  IN_PROGRESS
  PENDING_REVIEW
  COMPLETED
}

enum UserRole {
  CADET
  ARCHITECT
  OFFICER
  ADMIN
}

model Rank {
  id                   String   @id @default(cuid())
  campaignId           String? // null = глобальный ранг, иначе привязан к кампании
  level                Int
  name                 String // "Искатель", "Пилот-кандидат", "Кадет"
  title                String // "Космический скиталец"
  description          String?
  iconUrl              String? // Кастомная иконка ранга
  minExperience        Int      @default(0)
  minMissions          Int      @default(0)
  requiredCompetencies Json? // { "Аналитика": 3, "Лидерство": 2 }
  rewards              Json? // { "mana": 100, "badge": "pilot_wings" }
  createdAt            DateTime @default(now())
  
  campaign Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, level]) // Уникальный уровень в рамках кампании
  @@index([campaignId])
}

model StoreItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  price       Int // цена в мане
  category    ItemCategory
  imageUrl    String?
  isAvailable Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  purchases UserPurchase[]
}

model UserPurchase {
  id          String   @id @default(cuid())
  userId      String
  itemId      String
  purchasedAt DateTime @default(now())

  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item StoreItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
}

model UserNotification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  metadata  Json? // Additional data like missionId, rankId, etc
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CampaignCategory {
  ONBOARDING
  BRAND_AMBASSADOR
  PROFESSIONAL_GROWTH
  CORPORATE_LIFE
}

enum ItemCategory {
  MERCH
  BONUS
  BADGE
  AVATAR
}

enum NotificationType {
  MISSION_COMPLETED
  RANK_UP
  NEW_MISSION_AVAILABLE
  PURCHASE_SUCCESS
  MISSION_APPROVED
  MISSION_REJECTED
}

model UserCampaignVariant {
  id         String   @id @default(cuid())
  userId     String
  campaignId String
  assignedAt DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([userId, campaignId])
}
